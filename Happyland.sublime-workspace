{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"L_",
				"L_BG_SOFT"
			],
			[
				"edge",
				"edge_left"
			],
			[
				"layer",
				"layerMap"
			],
			[
				"TILE",
				"TILE_WIDTH"
			],
			[
				"TS_MID",
				"TS_MID_LEFT"
			],
			[
				"TileShape",
				"TileShape_ToStr"
			],
			[
				"shape",
				"shapeStr"
			],
			[
				"TileShae",
				"TileShape_FromStr"
			],
			[
				"colisionOn",
				"colisionOnX"
			],
			[
				"col",
				"colisionOnY"
			],
			[
				"po",
				"points"
			],
			[
				"LB",
				"L_BG_SOFT"
			],
			[
				"coli",
				"colisionOnX"
			],
			[
				"colisi",
				"collisionOnX"
			],
			[
				"coll",
				"collisionOnX"
			],
			[
				"player",
				"player"
			],
			[
				"no",
				"nocollision"
			],
			[
				"TILE_",
				"TILE_HEIGHT"
			],
			[
				"Uint",
				"Uint32"
			],
			[
				"cu",
				"currentColor"
			],
			[
				"curr",
				"currentColor"
			],
			[
				"L_D",
				"L_DEATH"
			],
			[
				"L_BG",
				"L_BG_SOFT"
			],
			[
				"L_F",
				"L_FG_SOFT"
			],
			[
				"ch",
				"characters"
			],
			[
				"Layer",
				"Layer_IsSolid"
			],
			[
				"struc",
				"structures"
			],
			[
				"__",
				"__STRUCTURES_SRC_H__"
			],
			[
				"pla",
				"player"
			],
			[
				"plaer",
				"player"
			],
			[
				"pl",
				"player"
			],
			[
				"ff",
				"fflush"
			],
			[
				"Game",
				"Game_ApplyCollision"
			],
			[
				"pso",
				"position"
			],
			[
				"L_FG",
				"L_FG_SOLID"
			],
			[
				"L_BG_",
				"L_BG_SOLID"
			],
			[
				"TIL",
				"TILE_HEIGHT"
			],
			[
				"L_FG_S",
				"L_FG_SOFT"
			],
			[
				"pos",
				"position"
			],
			[
				"char",
				"charSurface"
			],
			[
				"PLayer_",
				"Player_SetCharacter"
			],
			[
				"CS",
				"CS_JUMP"
			],
			[
				"go",
				"goUp"
			],
			[
				"cpBody",
				"cpBodyResetForces"
			],
			[
				"staic",
				"staticBody"
			],
			[
				"cpSpaceAdd",
				"cpSpaceAddBody"
			],
			[
				"static",
				"staticBody"
			],
			[
				"TILE_W",
				"TILE_WIDTH"
			],
			[
				"cpSpaceA",
				"cpSpaceAddShape"
			],
			[
				"tmp",
				"tmpShape"
			],
			[
				"cpSh",
				"cpShapeSetFriction"
			],
			[
				"cpVe",
				"cpVect2SDL_Rect"
			],
			[
				"start",
				"startPosDefined"
			],
			[
				"startPos",
				"startPosDefined"
			],
			[
				"Player",
				"Player1"
			],
			[
				"Game_R",
				"Game_RemovePlayer"
			],
			[
				"PlayerList",
				"PlayerList_elem_t"
			],
			[
				"PlayerL",
				"PlayerList_get"
			],
			[
				"Ch",
				"CharacterList_get"
			],
			[
				"Char",
				"CharacterSurface_cmp"
			],
			[
				"CharacterSu",
				"CharacterSurface_get"
			],
			[
				"cha",
				"character"
			],
			[
				"Chara",
				"CharacterSurface"
			],
			[
				"Pla",
				"Player"
			],
			[
				"Mix",
				"Mix_PlayingMusic"
			],
			[
				"Mix_P",
				"Mix_PauseMusic"
			],
			[
				"curren",
				"currentMap"
			],
			[
				"Map_l",
				"Map_list_get"
			],
			[
				"CHARA",
				"CHARACTER_DIR_LEN"
			],
			[
				"chara",
				"character"
			],
			[
				"Characte",
				"CharacterList"
			],
			[
				"Cha",
				"CharacterSurface_new"
			],
			[
				"CharacterS",
				"CharacterSurface_new"
			],
			[
				"CH",
				"CHARACTER_LIST_FILE"
			],
			[
				"CHA",
				"CHARACTER_LIST_FILE"
			],
			[
				"charac",
				"characters"
			],
			[
				"Str_c",
				"Str_cmp"
			],
			[
				"CO",
				"CO_LEFT"
			],
			[
				"ass",
				"assets"
			],
			[
				"CHAR",
				"CHARACTER_DIR_LEN"
			],
			[
				"jum",
				"jump_l"
			],
			[
				"star",
				"startJump_pos"
			],
			[
				"fall",
				"fallCpt"
			],
			[
				"Gam",
				"Game_DisplayMap"
			],
			[
				"sta",
				"startJump_pos"
			],
			[
				"SDL",
				"SDL_MIXER_FLAGS"
			],
			[
				"SDL_",
				"SDL_MIXER_FLAGS"
			],
			[
				"las",
				"lastTick_anim"
			],
			[
				"SDL_Get",
				"SDL_GetTicks"
			],
			[
				"dest",
				"destRect"
			],
			[
				"SDL_C",
				"SDL_CreateRGBSurface"
			],
			[
				"CS_",
				"CS_DEFAULT"
			],
			[
				"Pl",
				"Player"
			],
			[
				"ASS",
				"ASSETS_DIR"
			],
			[
				"as",
				"currentAssetImage"
			],
			[
				"tri",
				"trim"
			],
			[
				"trim",
				"trimComment"
			],
			[
				"cra",
				"crawl1"
			],
			[
				"CS_CRA",
				"CS_CRAWL_1"
			],
			[
				"C",
				"CharacterState"
			],
			[
				"Play",
				"PlayerState_free"
			],
			[
				"SDL_Sur",
				"SDL_Surface_cmp"
			],
			[
				"SDL_Surface_c",
				"SDL_Surface_copy"
			],
			[
				"SDL_Sr",
				"SDL_Surface_cmp"
			],
			[
				"chra",
				"characters"
			],
			[
				"GameD",
				"GameData_free"
			],
			[
				"config",
				"configFile"
			],
			[
				"MAP",
				"MAPS_LIST_FILE"
			],
			[
				"Map_load",
				"Map_load_list"
			],
			[
				"Ass",
				"Asset_list_new"
			],
			[
				"loa",
				"loaded"
			],
			[
				"__DEBU",
				"__DEBUG_ASSET_LOAD__"
			],
			[
				"Asset",
				"Asset_load_config"
			],
			[
				"__DE",
				"__DEBUG_ASSET_LOAD__"
			],
			[
				"__DEBUG",
				"__DEBUG_MAP_LOAD__"
			],
			[
				"raw",
				"rawmapPos"
			],
			[
				"line",
				"line_number"
			],
			[
				"__DEUG",
				"__DEBUG_LVL_0__"
			],
			[
				"Map_init",
				"Map_init_load"
			],
			[
				"Map_",
				"Map_render"
			],
			[
				"strc",
				"strcpy"
			],
			[
				"Map_ini",
				"Map_init_load"
			],
			[
				"free",
				"freeValue"
			],
			[
				"inMap",
				"inMapLayer"
			],
			[
				"inMa",
				"inMapLayer"
			],
			[
				"stru",
				"structures"
			],
			[
				"back",
				"background_color"
			],
			[
				"_show",
				"_showMessage"
			]
		]
	},
	"buffers":
	[
		{
			"file": "src/main.c",
			"settings":
			{
				"buffer_size": 2102,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/game.c",
			"settings":
			{
				"buffer_size": 6812,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "#include \"player.h\"\n\nIMPLEMENT_LIST(PlayerList,  Player *,  char *, Player_copy, Str_copy, Player_cmp, Str_cmp, Player_free, Str_free);\n\nPlayer * Player_new(char * name)\n{\n	Player * tmp = NULL;\n	assert(name != NULL);\n	tmp = calloc(sizeof(tmp), sizeof(Player));\n	tmp->name = calloc(sizeof(char) * strlen(name), sizeof(char));\n	tmp->state       = CS_DEFAULT;\n	tmp->orientation = CO_RIGHT;\n	tmp->surface     = NULL;\n	tmp->character   = NULL;\n	tmp->position.x  = 0;\n	tmp->position.y  = 0;\n	tmp->position.h  = 0;\n	tmp->position.w  = 0;\n	tmp->speed.x     = 0;\n	tmp->speed.y     = 0;\n	tmp->inJump      = false;\n	tmp->collision   = false;\n	tmp->walkCpt     = 0;\n	strcpy(tmp->name, name);\n	return tmp;\n}\n\nvoid Player_free(Player * val)\n{\n	if(val != NULL)\n	{\n		free(val->name);\n		free(val);\n	}\n}\n\nint Player_cmp(Player * p1, Player * p2)\n{\n	assert(p1 != NULL);\n	assert(p2 != NULL);\n	return memcmp(p1, p2, sizeof(Player));\n}\n\nvoid Player_copy(Player ** dst, Player ** src)\n{\n	assert(*src != NULL);\n	*dst = calloc(sizeof(Player), sizeof(Player));\n	memcpy(*dst, *src, sizeof(Player));\n}\n\nvoid Player_SetCharacter(Player * player, CharacterSurface * cs)\n{\n	assert(player != NULL);\n	assert(cs != NULL);\n	player->character = cs;\n	player->position.h = player->character->size.h;\n	player->position.w = player->character->size.w;\n	player->surface    = CharacterSurface_get(player->character, player->state, player->orientation);\n}\n\nbool Player_HaveColision(Player * player, Map * map)\n{\n	SDL_Point pt[6];\n	Layer points[6] = {L_BG_SOFT, L_BG_SOFT, L_BG_SOFT, L_BG_SOFT, L_BG_SOFT, L_BG_SOFT};\n\n	assert(player != NULL && map != NULL);\n\n	// Top left\n	pt[0].x = player->position.x;\n	pt[0].y = player->position.y;\n\n	// Top Right\n	pt[1].x = player->position.x + player->position.w - 1;\n	pt[1].y = player->position.y;\n\n	// Bottom right\n	pt[2].x = player->position.x + player->position.w - 1;\n	pt[2].y = player->position.y + player->position.h - 1;\n\n	// Bottom left\n	pt[3].x = player->position.x;\n	pt[3].y = player->position.y + player->position.h - 1;\n\n	// Middle left\n	pt[4].x = player->position.x;\n	pt[4].y = player->position.y + player->position.h / 2;\n\n	// Middle Right\n	pt[5].x = player->position.x + player->position.w - 1;\n	pt[5].y = player->position.y + player->position.h / 2;\n\n	points[0] = Map_GetPixelLayer(map, pt[0].x, pt[0].y);\n	points[1] = Map_GetPixelLayer(map, pt[1].x, pt[1].y);\n	points[2] = Map_GetPixelLayer(map, pt[2].x, pt[2].y);\n	points[3] = Map_GetPixelLayer(map, pt[3].x, pt[3].y);\n	points[4] = Map_GetPixelLayer(map, pt[4].x, pt[4].y);\n	points[5] = Map_GetPixelLayer(map, pt[5].x, pt[5].y);\n\n	#ifdef __DEBUG_COLLISION__\n		fprintf(stdout, \"\\rCollision: top-lef[%3d,%3d]:%s top-rig[%3d,%3d]:%s bot-rig[%3d,%3d]:%s bot-lef[%3d,%3d]:%s mid-left[%3d,%3d]:%s mid-rig[%3d,%3d]:%s\",\n			pt[0].x, pt[0].y, Layer_GetName(points[0]),\n			pt[1].x, pt[1].y, Layer_GetName(points[1]),\n			pt[2].x, pt[2].y, Layer_GetName(points[2]),\n			pt[3].x, pt[3].y, Layer_GetName(points[3]),\n			pt[4].x, pt[4].y, Layer_GetName(points[4]),\n			pt[5].x, pt[5].y, Layer_GetName(points[5])\n		);\n	#endif\n\n	return Layer_IsSolid(points[0]) || Layer_IsSolid(points[1]) || Layer_IsSolid(points[2]) || Layer_IsSolid(points[3]) || Layer_IsSolid(points[4]) || Layer_IsSolid(points[5]);\n}\n\nvoid Player_UpdateSurface(Player * player, Map * map)\n{\n	SDL_Rect target      = {0,0,0,0};\n	bool     endmove     = false;\n	bool     colision    = false;\n	bool     colisionOnX = false;\n	bool     colisionOnY = false;\n\n\n	assert(player != NULL);\n\n	// Update state\n\n	if(player->speed.x == 0 && player->speed.y == 0)\n		player->state = CS_DEFAULT;\n	else\n	{\n		if(player->speed.x != 0)\n		{\n			player->walkCpt++;\n			if(player->state == CS_DEFAULT && player->walkCpt == 5)\n			{\n				player->state = CS_WALK;\n				player->walkCpt = 0;\n			}\n			else if(player->state == CS_WALK && player->walkCpt == 5)\n			{\n				player->state = CS_DEFAULT;\n				player->walkCpt = 0;\n			}\n\n			if(player->speed.x > 0)\n				player->orientation = CO_RIGHT;\n			else if(player->speed.x < 0)\n				player->orientation = CO_LEFT;\n		}\n\n		if(player->speed.y < 0)\n		{\n			player->state = CS_JUMP;\n		}\n		else if(player->speed.y > 0)\n		{\n			player->state = CS_SLIDE;\n		}\n	}\n\n	player->surface  = CharacterSurface_get(player->character, player->state, player->orientation);\n\n	// If a map is open check for collision\n	if(map != NULL)\n	{\n		// Set move target\n		target.x = player->position.x + player->speed.x;\n		target.y = player->position.y + player->speed.y;\n\n		endmove = false;\n		while(!endmove && (player->speed.x != 0 || player->speed.y != 0))\n		{\n			// Move\n			if(player->position.x != target.x && !colisionOnX)\n			{\n				     if(player->speed.x > 0) player->position.x++;\n				else if(player->speed.x < 0) player->position.x--;\n			}\n\n			if(player->position.y != target.y && !colisionOnY)\n			{\n				     if(player->speed.y > 0) player->position.y++;\n				else if(player->speed.y < 0) player->position.y--;\n			}\n\n			if(Player_HaveColision(player, map))\n			{\n				// Go backward in no collision place\n				     if(player->speed.x > 0) player->position.x--;\n				else if(player->speed.x < 0) player->position.x++;\n\n				     if(player->speed.y > 0) player->position.y--;\n				else if(player->speed.y < 0) player->position.y++;\n\n				// Find collision axis\n				if(player->position.x != target.x && !colisionOnX)\n				{\n					     if(player->speed.x > 0) player->position.x++;\n					else if(player->speed.x < 0) player->position.x--;\n\n					if(Player_HaveColision(player, map))\n					{\n						colisionOnX = true;\n						     if(player->speed.x > 0) player->position.x--;\n						else if(player->speed.x < 0) player->position.x++;\n					}\n				}\n\n				if(player->position.y != target.y && !colisionOnY)\n				{\n					     if(player->speed.y > 0) player->position.y++;\n					else if(player->speed.y < 0) player->position.y--;\n\n					if(Player_HaveColision(player, map))\n					{\n						colisionOnY = true;\n						     if(player->speed.y > 0) player->position.y--;\n						else if(player->speed.y < 0) player->position.y++;\n					}\n				}\n\n				if(colisionOnX && colisionOnY)\n					endmove = true;\n			}\n\n			if((player->position.x == target.x && player->position.y == target.y) ||\n			   (colisionOnY && colisionOnX) ||\n			   (colisionOnY && player->position.x == target.x) ||\n			   (colisionOnX && player->position.y == target.y) ||\n			   (colisionOnX && player->position.x == target.x) ||\n			   (colisionOnY && player->position.y == target.y)\n			   )\n				endmove = true;\n		}\n\n		// Apply Gravity if needed\n		if(player->speed.y == 0 && !player->inJump || colision)\n		{\n			// Test if player is on flat\n			player->position.y++;\n\n			if(Player_HaveColision(player, map))\n				player->position.y--;\n			else\n			{\n				endmove = false;\n				target.y = player->position.y + 20;\n				while(!endmove)\n				{\n					if(player->position.y != target.y)\n						player->position.y++;\n\n					if(Player_HaveColision(player, map))\n					{\n						endmove = true;\n						player->position.y--;\n					}\n\n					if(player->position.y == target.y)\n						endmove = true;\n				}\n			}\n		}\n	}\n	// If no map open just move player\n	else\n	{\n		// Apply Speed\n		player->position.x += player->speed.x;\n		player->position.y += player->speed.y;\n\n		// Apply Gravity\n		player->position.y += GRAVITY;\n	}\n\n	Player_ResetSpeed(player);\n}\n\nvoid Player_ResetSpeed(Player * player)\n{\n	assert(player != NULL);\n	player->speed.x = 0;\n	player->speed.y = 0;\n}\n\nvoid Player_ApplyGravity(Player * player, int gravity)\n{\n	assert(player != NULL);\n	if(!player->inJump)\n		player->speed.y = gravity;\n}\n\nvoid Player_AddOverlay(Player * player, SDL_Surface * screen)\n{\n	static SDL_Color color = {0x00, 0x00, 0x00, 0x50};\n	SDL_Surface * overlay = SDL_CreateRGBSurface(0, player->character->size.w, player->character->size.h, 32, RMASK, GMASK, BMASK, AMASK);\n\n	SDL_FillRect(overlay, NULL,\n		SDL_MapRGBA(\n			overlay->format,\n			color.r,\n			color.g,\n			color.b,\n			color.a\n		)\n	);\n\n	SDL_BlitSurface(overlay, NULL, screen, &(player->position));\n	SDL_FreeSurface(overlay);\n}",
			"file": "src/characters/player.c",
			"file_size": 7944,
			"file_write_time": 130652694939002655,
			"settings":
			{
				"buffer_size": 7944,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/config.h",
			"settings":
			{
				"buffer_size": 1619,
				"line_ending": "Unix"
			}
		},
		{
			"file": "assets/maps/example.map",
			"settings":
			{
				"buffer_size": 1726,
				"line_ending": "Unix"
			}
		},
		{
			"file": "assets/graphics/assets.conf",
			"settings":
			{
				"buffer_size": 1431,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/engine/asset.c",
			"settings":
			{
				"buffer_size": 4323,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/engine/tile.c",
			"settings":
			{
				"buffer_size": 2099,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/engine/map.c",
			"settings":
			{
				"buffer_size": 14365,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/utils.c",
			"settings":
			{
				"buffer_size": 199,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/engine/map.h",
			"settings":
			{
				"buffer_size": 1664,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/utils.h",
			"settings":
			{
				"buffer_size": 263,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/engine/character.h",
			"settings":
			{
				"buffer_size": 1944,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/characters/player.h",
			"settings":
			{
				"buffer_size": 971,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/structures.h",
			"settings":
			{
				"buffer_size": 890,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/engine/structures.h",
			"settings":
			{
				"buffer_size": 3873,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/engine/tile.h",
			"settings":
			{
				"buffer_size": 1271,
				"line_ending": "Unix"
			}
		},
		{
			"file": "src/game.h",
			"settings":
			{
				"buffer_size": 1219,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "Packages/User/make.sublime-build",
	"command_palette":
	{
		"height": 375.0,
		"selected_items":
		[
			[
				"Men",
				"View: Toggle Menu"
			],
			[
				"al",
				"AlignTab"
			],
			[
				"Linter",
				"SublimeLinter: Enable Debug Mode"
			],
			[
				"Lint",
				"SublimeLinter: Lint This View"
			],
			[
				"Packa",
				"Package Control: Install Package"
			],
			[
				"SublimeLinter",
				"SublimeLinter: Show All Errors"
			],
			[
				"Sub",
				"SublimeLinter: Toggle Linter"
			],
			[
				"Toggle lin",
				"SublimeLinter: Toggle Linter"
			],
			[
				"Package ",
				"Package Control: Install Package"
			],
			[
				"Pac",
				"Package Control: Install Package"
			],
			[
				"Set:JS",
				"Set Syntax: JSON"
			],
			[
				"Pack",
				"Package Control: Install Package"
			],
			[
				"Rein",
				"Indentation: Reindent Lines"
			],
			[
				"Li",
				"Licence Snippet: GPLv3"
			],
			[
				"Rei",
				"Indentation: Reindent Lines"
			],
			[
				"Re",
				"Indentation: Reindent Lines"
			],
			[
				"Lo",
				"Snippet: Lorem ipsum"
			],
			[
				"set syntax: C",
				"Set Syntax: C"
			],
			[
				"",
				"AlignTab"
			],
			[
				"Al",
				"AlignTab"
			],
			[
				"set:c++",
				"Set Syntax: C++"
			],
			[
				"Set:PHP",
				"Set Syntax: PHP"
			],
			[
				"Lore",
				"Snippet: Lorem ipsum"
			],
			[
				"SET:P",
				"Set Syntax: PHP"
			],
			[
				"set:js",
				"Set Syntax: JSON"
			],
			[
				"rein",
				"Indentation: Reindent Lines"
			],
			[
				"set:ht",
				"Set Syntax: HTML"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"set",
				"Set Syntax: PHP"
			],
			[
				"set:PHP",
				"Set Syntax: PHP"
			],
			[
				"set:html",
				"Set Syntax: HTML"
			],
			[
				"packa",
				"Package Control: Install Package"
			],
			[
				"Set:",
				"Set Syntax: HTML"
			],
			[
				"th",
				"Themr: List themes"
			],
			[
				"the",
				"Themr: List themes"
			],
			[
				"pac",
				"Package Control: Install Package"
			],
			[
				"Set Synt:m",
				"Set Syntax: Markdown"
			],
			[
				"set:php",
				"Set Syntax: PHP"
			],
			[
				"html",
				"Snippet: html"
			],
			[
				"set:htm",
				"Set Syntax: HTML"
			],
			[
				"set:sq",
				"Set Syntax: SQL"
			],
			[
				"comme",
				"Toggle Block Comment"
			],
			[
				"setsy:sql",
				"Set Syntax: SQL"
			],
			[
				"comm",
				"Toggle Comment"
			],
			[
				"setsy:java",
				"Set Syntax: Java"
			],
			[
				"Insta",
				"Package Control: Install Package"
			],
			[
				"INsta",
				"Package Control: Install Package"
			],
			[
				"set syn:c",
				"Set Syntax: C"
			],
			[
				"set:ma",
				"Set Syntax: Markdown"
			],
			[
				"LOre",
				"Snippet: Lorem ipsum"
			],
			[
				"Setsyn:html",
				"Set Syntax: HTML"
			],
			[
				"set syn:ja",
				"Set Syntax: JavaScript"
			],
			[
				"set:j",
				"Set Syntax: JavaScript"
			],
			[
				"PAcka",
				"Package Control: Install Package"
			],
			[
				"Lorem",
				"Snippet: Lorem ipsum"
			],
			[
				"Git p",
				"Git: Push"
			],
			[
				"Git stat",
				"Git: Status"
			]
		],
		"width": 453.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); open(os.path.join(ipp, pf), 'wb').write(urllib.request.urlopen( 'http://sublime.wbond.net/' + pf.replace(' ','%20')).read()) "
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/baudouin/Documents/ESEO/Happyland_svn",
		"/home/baudouin/Documents/ESEO/Happyland_svn/assets",
		"/home/baudouin/Documents/ESEO/Happyland_svn/assets/characters",
		"/home/baudouin/Documents/ESEO/Happyland_svn/assets/graphics",
		"/home/baudouin/Documents/ESEO/Happyland_svn/assets/maps",
		"/home/baudouin/Documents/ESEO/Happyland_svn/assets/music",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/characters",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/engine"
	],
	"file_history":
	[
		"/home/baudouin/.config/sublime-text-3/Packages/User/SublimeLinter.sublime-settings",
		"/home/baudouin/Documents/ESEO/Happyland_svn/assets/maps/example.map",
		"/run/user/1000/gvfs/sftp:host=feildel.fr,user=root/srv/http/vhost/gplay/index.php",
		"/run/user/1000/gvfs/sftp:host=feildel.fr,user=root/srv/http/vhost/api.mariage/index.php",
		"/srv/http/example.php",
		"/home/baudouin/.config/sublime-text-3/Packages/Default/Preferences.sublime-settings",
		"/home/baudouin/.config/sublime-text-3/Packages/User/Preferences.sublime-settings",
		"/home/baudouin/devel/cloudfile-webdav@mozilla.kewis.ch/chrome/locales/en-US/settings.dtd",
		"/home/baudouin/devel/cloudfile-webdav@mozilla.kewis.ch/chrome/content/management.js",
		"/home/baudouin/devel/cloudfile-webdav@mozilla.kewis.ch/chrome/content/management.xhtml",
		"/home/baudouin/devel/cloudfile-webdav@mozilla.kewis.ch/chrome/content/settings.js",
		"/home/baudouin/devel/cloudfile-webdav@mozilla.kewis.ch/components/nsWebDAV.js",
		"/home/baudouin/devel/cloudfile-webdav@mozilla.kewis.ch/chrome/content/settings.xhtml",
		"/home/baudouin/devel/cloudfile-webdav@mozilla.kewis.ch/chrome/skin/webdav_32.png",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/engine/map.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/engine/tile.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/config.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/engine/character.c",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/string-tools.c",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/string-tools.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/structures.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/engine/structures.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/utils.c",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/utils.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/configure.ac",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/engine/asset.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/engine/character.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/engine/asset.c",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/characters/player.c",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/main.c",
		"/home/baudouin/Documents/ESEO/Happyland_svn/assets/characters/dog.character",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/engine/graphics.c",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/game.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/game.c",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/engine/tile.c",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/engine/map.c",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/characters/player.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/assets/characters/character.list",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/graphics/graphics.c",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/graphics/character.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/graphics/graphics.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/Makefile.am",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/engine/Makefile.am",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/graphics/asset.c",
		"/home/baudouin/Documents/ESEO/Happyland_svn/assets/characters/player.character",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/graphics/asset.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/graphics/character.c",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/graphics/Makefile.am",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/characters/Makefile.am",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/graphics/map.c",
		"/home/baudouin/Documents/ESEO/Happyland_svn/assets/graphics/arc1.png",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/characters/../character.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/graphics/tile.c",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/graphics/structures.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/assets/graphics/assets.conf",
		"/home/baudouin/Documents/ESEO/Happyland_svn/assets/maps/map.list",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/graphics/map.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/c-containers/list.c",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/c-containers/list.h",
		"/home/baudouin/Documents/ESEO/Happyland_svn/src/characters.h",
		"/home/baudouin/Documents/ESEO/Happyland/assets/maps/map.list",
		"/home/baudouin/aur/pkgbuild/TinyDir/PKGBUILD",
		"/home/baudouin/workspace/ContainerMain/README.md",
		"/home/baudouin/Applications/Adobe CS5 Master Collection/Instructions.txt",
		"/tmp/AndroidManifest.xml",
		"/home/baudouin/workspace/ContainerMain/AndroidManifest.xml",
		"/home/baudouin/Documents/ESEO/Happyland/src/graphics/map.h",
		"/home/baudouin/Documents/ESEO/Happyland/src/Makefile.am",
		"/home/baudouin/Documents/ESEO/Happyland/src/CContainers/Makefile.am",
		"/home/baudouin/Documents/ESEO/Happyland/src/graphics/asset.c",
		"/home/baudouin/Documents/ESEO/Happyland/src/graphics/asset.h",
		"/home/baudouin/Documents/ESEO/Happyland/src/graphics/graphics.c",
		"/home/baudouin/Documents/ESEO/Happyland/src/graphics/structures.h",
		"/home/baudouin/Documents/ESEO/Happyland/assets/graphics/blocks1.png",
		"/home/baudouin/Documents/ESEO/Happyland/src/graphics/map.c",
		"/home/baudouin/Documents/ESEO/Happyland/assets/graphics/assets.conf",
		"/home/baudouin/Documents/ESEO/Happyland/src/graphics/tile.h",
		"/home/baudouin/Documents/ESEO/Happyland/assets/maps/example.map",
		"/home/baudouin/Documents/ESEO/Happyland/src/game.h",
		"/home/baudouin/Documents/ESEO/Happyland/src/array.c",
		"/home/baudouin/Documents/ESEO/Happyland/src/array.h",
		"/home/baudouin/Documents/ESEO/Happyland/src/main.c",
		"/home/baudouin/Documents/ESEO/Happyland/src/graphics/tile.c",
		"/home/baudouin/Documents/ESEO/Happyland/src/game.c",
		"/home/baudouin/Documents/ESEO/Happyland/configure.ac",
		"/home/baudouin/Documents/ESEO/Happyland/src/utils.h",
		"/home/baudouin/Documents/ESEO/Happyland/src/graphics/graphics.h",
		"/home/baudouin/Documents/ESEO/Happyland/autogen.sh",
		"/home/baudouin/Documents/ESEO/Happyland/src/graphics/Makefile.am",
		"/home/baudouin/Documents/ESEO/Happyland/.gitignore",
		"/home/baudouin/Documents/ESEO/Happyland/README.md",
		"/home/baudouin/Documents/ESEO/Happyland/Makefile.old.manuel",
		"/home/baudouin/Documents/ESEO/Happyland/Makefile.am",
		"/tmp/autogen.sh",
		"/tmp/configure.ac",
		"/home/baudouin/Documents/ESEO/Happyland/INSTALL",
		"/home/baudouin/Documents/ESEO/Happyland/Makefile.in",
		"/home/baudouin/Documents/ESEO/Happyland/graphics/graphics.h",
		"/home/baudouin/Documents/ESEO/Happyland/game.h",
		"/home/baudouin/Documents/ESEO/Happyland/config.h",
		"/home/baudouin/Documents/ESEO/Happyland/game.c",
		"/home/baudouin/Documents/ESEO/Happyland/Makefile",
		"/home/baudouin/Documents/ESEO/Happyland/array.c",
		"/home/baudouin/Documents/ESEO/Happyland/array.h",
		"/home/baudouin/Documents/ESEO/Happyland/graphics/tile.c",
		"/home/baudouin/Documents/ESEO/Happyland/utils.h",
		"/home/baudouin/Documents/ESEO/Happyland/graphics/tile.h",
		"/home/baudouin/Documents/ESEO/Happyland/graphics/asset.h",
		"/home/baudouin/Documents/ESEO/Happyland/graphics/map.h",
		"/home/baudouin/Documents/ESEO/Happyland/graphics/graphics.c",
		"/home/baudouin/Documents/ESEO/Happyland/main.c",
		"/home/baudouin/gnome-extensions/DynamicTopBar/dynamicTopBar@gnomeshell.feildel.fr/stylesheet.css",
		"/home/baudouin/gnome-extensions/DynamicTopBar/dynamicTopBar@gnomeshell.feildel.fr/extension.js",
		"/home/baudouin/gnome-extensions/DynamicTopBar/dynamicTopBar@gnomeshell.feildel.fr/metadata.json",
		"/home/baudouin/devel/CArray/README.md",
		"/home/baudouin/devel/CArray/LICENSE",
		"/home/baudouin/Documents/ESEO/Happyland/utils.c",
		"/home/baudouin/Documents/ESEO/Happyland/string-tools.c",
		"/home/baudouin/Documents/ESEO/Happyland/string-tools.h",
		"/home/baudouin/Documents/ESEO/Happyland/error-codes.h",
		"/home/baudouin/Documents/ESEO/Happyland/utils.expanded.c",
		"/home/baudouin/gnome-extensions/MouseTravel/prefs.js",
		"/home/baudouin/gnome-extensions/MouseTravel/extension.js",
		"/home/baudouin/gnome-extensions/MouseTravel/metadata.json",
		"/home/baudouin/gnome-extensions/MouseTravel/schemas/org.gnome.shell.extensions.mouse-travel.gschema.xml",
		"/home/baudouin/.cache/.fr-TluEv0/metadata.json",
		"/home/baudouin/Documents/ESEO/Happyland/assets/graphics/license.rtf",
		"/home/baudouin/Documents/ESEO/svn/user6/exo12/lib.c"
	],
	"find":
	{
		"height": 34.0
	},
	"find_in_files":
	{
		"height": 90.0,
		"where_history":
		[
			"",
			"<open files>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"edge_",
			");\n",
			"B",
			"3",
			"Layer_FillPixels",
			"SDL_CreateRGBSurface",
			"Color",
			"2",
			"***",
			" i",
			"nbrAssets",
			"endJump",
			"cpt",
			"DOG_H",
			"calloc",
			"Map_load_list",
			"DEBUG_MAP_0",
			"DEBUG_MAP",
			"ARRAY",
			"10",
			"20",
			"memcmp",
			"Array_Tile",
			"; ",
			" (\\{|\\}) ",
			" ({|}) ",
			"; ",
			" \\{",
			"\\} ",
			"\\{ ",
			"\\} ",
			" \\}",
			"\\{ ",
			"{ ",
			"; ",
			"Indextype",
			"Valuetype",
			"ARRAY",
			"Typename",
			"Tile_load",
			"$(LIBS",
			"create-build-dir",
			"$(BUILD_DIR)",
			"$app['bdd']",
			"database",
			"package",
			"https://fonts.gstatic.com/s/opensans/v10/",
			"https://fonts.gstatic.com/s/ptsans/v7/",
			"https://fonts.gstatic.com/s/ptserif/v8/",
			"confirm",
			"blowfish.encrypt",
			"blowfish.decrypt",
			"document.getElementById",
			"kdebase-dolphin",
			"  \\d{1,3}\\)",
			">\n",
			"echo",
			"RDM",
			"KISS",
			"RDM",
			"z-index",
			"nav",
			"sizing",
			"urlencode",
			"'error'",
			"^$",
			"[^\\{\\}]",
			"[^\\t\\n ]",
			"\\t|\\n",
			" ",
			"<!--",
			"bd",
			"fieldset",
			"add",
			"finPage",
			"echo",
			"Yii::app\\(\\)->params",
			"Yii::app()->params",
			"errorSummary",
			"encrypt\\(",
			"sm",
			"compton",
			"display_volume",
			"after",
			"h2",
			" ",
			"pstr",
			"tmp",
			"freeListe",
			"fprintf(.*);",
			"fprintf(error",
			"printf(\"",
			"(*w)",
			"	",
			"län",
			"\\.",
			".",
			" 	",
			"btn btn-primary btn-danger",
			"btn btn-primary btn-success",
			"<label class=\"btn btn-primary\"><input type=\"radio\" name=\"options\" id=\"option2\"> Non</label>",
			"<label class=\"btn btn-primary\"><input type=\"radio\" name=\"options\" id=\"option1\"> Oui</label>",
			"btn-md",
			"height",
			"line-height",
			"sprintf_s",
			"strcpy_s",
			"sprintf_s",
			"strcat_s",
			"sprintf_s",
			"strcpy_s",
			"sprintf_s",
			"strcpy_s",
			"strcat_s",
			"strcpy_s",
			"sprintf_s",
			"//-+",
			"///-*",
			"//-------------------------",
			"    ",
			"strcpy_s",
			"sprintf_s",
			"sprintf",
			"sprintf_s",
			"strcpy_s",
			"strcat_s",
			"strcpy_s",
			"sprintf_s"
		],
		"highlight": true,
		"in_selection": true,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"2",
			"3",
			"walkCpt",
			"PLAYER_H",
			"DEBUG_MAP_FN",
			"DEBUG_MAP_0",
			"LIST",
			"B",
			"A",
			"Tile_array",
			";\\n",
			"\\n$1\\n",
			";\\n",
			"\\n{",
			"}\\n",
			"\\n}",
			"{\\n",
			"{\\n\\t",
			";\\n",
			"int",
			"IntArray",
			"Valuetype",
			"$(RELEASE_LIBS",
			"create-release-dir",
			"$(RELEASE_BUILD_DIR)",
			"$bdd",
			"db",
			"pkg",
			"../fonts/",
			"encrypt",
			"decrypt",
			"$",
			"",
			"KISS",
			"rawurlencode",
			"'danger'",
			"",
			"finPageMinimal",
			"xs",
			"brightness",
			"h1",
			"\n",
			"fprintf$1; fflush(stderr);",
			"fprintf(stderr",
			"fprintf(error, \"",
			"tmp",
			";",
			"län, Sweden",
			",",
			"	",
			"btn btn-sm btn-danger",
			"btn btn-sm btn-success",
			"<label class=\"btn btn-primary btn-danger\"><input type=\"radio\" name=\"options\" id=\"option2\"> Non</label>",
			"<label class=\"btn btn-primary btn-success\"><input type=\"radio\" name=\"options\" id=\"option1\"> Oui</label>",
			"btn-sm",
			"display: block; height",
			"height",
			"sprintf",
			"strcpy",
			"sprintf",
			"strcat",
			"sprintf",
			"strcpy",
			"sprintf",
			"strcpy",
			"strcat",
			"strcpy",
			"sprintf",
			"///",
			"	",
			"strcpy",
			"sprintf",
			"strcpy",
			"strcat",
			"strcpy",
			"sprintf",
			"strcpy",
			"sprintf",
			"strcat",
			"sprintf",
			"strcpy",
			"sprintf",
			"strcat",
			"sprintf",
			"strcpy",
			"sprintf",
			"strcat",
			"sprintf",
			"strcpy",
			"sprintf",
			"",
			"insertionArbre",
			"droite",
			"200ms",
			"23.7%",
			"23.8%",
			"23.9%",
			"23.5%",
			"<a href=\"#anywhere\">Replier</a>",
			"<button type=\"button\" class=\"clear-anchor\">Replier</button>",
			"",
			" ",
			"endif",
			"struct",
			"struct Element"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"folders":
	[
		{
			"follow_symlinks": true,
			"path": "/home/baudouin/Documents/ESEO/Happyland_svn"
		}
	],
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "src/main.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2102,
						"regions":
						{
						},
						"selection":
						[
							[
								259,
								259
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1350.0,
						"zoom_level": 1.0
					},
					"stack_index": 13,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "src/game.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 6812,
						"regions":
						{
						},
						"selection":
						[
							[
								6700,
								6700
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 3855.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "src/characters/player.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 7944,
						"regions":
						{
						},
						"selection":
						[
							[
								3832,
								3832
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 2925.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "src/config.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1619,
						"regions":
						{
						},
						"selection":
						[
							[
								1117,
								1117
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 14,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "assets/maps/example.map",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1726,
						"regions":
						{
						},
						"selection":
						[
							[
								936,
								936
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 225.0,
						"zoom_level": 1.0
					},
					"stack_index": 15,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "assets/graphics/assets.conf",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1431,
						"regions":
						{
						},
						"selection":
						[
							[
								1377,
								1377
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 1155.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 6,
					"file": "src/engine/asset.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 4323,
						"regions":
						{
						},
						"selection":
						[
							[
								2293,
								2293
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 870.0,
						"zoom_level": 1.0
					},
					"stack_index": 16,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "src/engine/tile.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 2099,
						"regions":
						{
						},
						"selection":
						[
							[
								1092,
								1092
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 255.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "src/engine/map.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14365,
						"regions":
						{
						},
						"selection":
						[
							[
								4577,
								4577
							],
							[
								4671,
								4671
							],
							[
								4765,
								4765
							],
							[
								4859,
								4859
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 5325.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "src/utils.c",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 199,
						"regions":
						{
						},
						"selection":
						[
							[
								124,
								124
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 17,
					"type": "text"
				}
			]
		},
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 10,
					"file": "src/engine/map.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1664,
						"regions":
						{
						},
						"selection":
						[
							[
								1600,
								1600
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 450.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "src/utils.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 263,
						"regions":
						{
						},
						"selection":
						[
							[
								240,
								240
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "src/engine/character.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1944,
						"regions":
						{
						},
						"selection":
						[
							[
								1858,
								1858
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 13,
					"file": "src/characters/player.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 971,
						"regions":
						{
						},
						"selection":
						[
							[
								499,
								499
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 14,
					"file": "src/structures.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 890,
						"regions":
						{
						},
						"selection":
						[
							[
								446,
								446
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 15,
					"file": "src/engine/structures.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3873,
						"regions":
						{
						},
						"selection":
						[
							[
								2228,
								2228
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1245.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 16,
					"file": "src/engine/tile.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1271,
						"regions":
						{
						},
						"selection":
						[
							[
								1204,
								1204
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 17,
					"file": "src/game.h",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1219,
						"regions":
						{
						},
						"selection":
						[
							[
								1186,
								1186
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 34.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			],
			[
				1,
				0,
				2,
				1
			]
		],
		"cols":
		[
			0.0,
			0.604134553628,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": false,
	"output.exec":
	{
		"height": 200.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"output.git-commit":
	{
		"height": 100.0
	},
	"output.git-push":
	{
		"height": 100.0
	},
	"output.markdown":
	{
		"height": 100.0
	},
	"project": "",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
			[
				"visite",
				"models/Visite.php"
			],
			[
				"cur",
				"/usr/include/curses.h"
			],
			[
				"trans",
				"transfert.cpp"
			],
			[
				"ten",
				"tendance2.cpp"
			],
			[
				"tend",
				"tendance.cpp"
			],
			[
				"telec2",
				"telec2.cpp"
			],
			[
				"tar",
				"tarifaut.cpp"
			],
			[
				"stati",
				"station.cpp"
			],
			[
				"synth",
				"synthese.cpp"
			],
			[
				"syno",
				"syno.cpp"
			],
			[
				"stat",
				"station.cpp"
			],
			[
				"rt",
				"rtc.cpp"
			],
			[
				"resea",
				"reseau.cpp"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 1,
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": true,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 190.0,
	"status_bar_visible": true,
	"template_settings":
	{
		"max_columns": 3
	}
}
